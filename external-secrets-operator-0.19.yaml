package:
  name: external-secrets-operator-0.19
  version: "0.19.2"
  epoch: 1
  description: Integrate external secret management systems with Kubernetes
  copyright:
    - license: Apache-2.0
  dependencies:
    provides:
      - external-secrets-operator=${{package.full-version}}

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/external-secrets/external-secrets
      tag: v${{package.version}}
      expected-commit: f6b47d56d1a5e86eaa3176b40bd00a86598b417e

  - uses: go/build
    with:
      go-package: go
      packages: .
      output: external-secrets

  - uses: strip

test:
  environment:
    contents:
      packages:
        - git
    paths:
      - path: /home/build
        type: directory
        permissions: 0o755
  pipeline:
    - uses: test/kwok/cluster
    - name: Setup and start operator
      runs: |
        set -euo pipefail

        # Clone repository to get CRDs matching the built version
        git clone --depth=1 --branch v${{package.version}} https://github.com/external-secrets/external-secrets

        # Install CRDs
        kubectl create -f external-secrets/deploy/crds/bundle.yaml
        kubectl wait --for condition=established --timeout=60s crd/clustersecretstores.external-secrets.io
        kubectl wait --for condition=established --timeout=60s crd/externalsecrets.external-secrets.io

        # Start the operator
        external-secrets > operator.log 2>&1 &
        OPERATOR_PID=$!
        sleep 10

        # Check operator is still running
        if ! kill -0 $OPERATOR_PID 2>/dev/null; then
          echo "ERROR: Operator failed to start"
          cat operator.log
          exit 1
        fi
    - name: Test with fake provider
      runs: |
        set -euo pipefail

        # Create a ClusterSecretStore with fake provider
        # https://github.com/external-secrets/external-secrets/pull/661
        kubectl apply -f clustersecretstore.yaml

        # Create an ExternalSecret that references the fake store
        kubectl apply -f externalsecret.yaml

        # Wait for the operator to sync and create the secret
        echo "Waiting for operator to sync..."
        secret_created=false
        for i in {1..20}; do
          if kubectl get secret my-created-secret -n default 2>/dev/null; then
            secret_created=true
            break
          fi
          echo "Attempt $i: Secret not yet created, waiting..."
          sleep 1
        done

        # Fail if secret wasn't created
        if [ "$secret_created" = "false" ]; then
          echo "ERROR: Secret was not created after 20 seconds"
          kubectl get externalsecret test-secret -n default -o yaml
          exit 1
        fi

        # Verify the secret contains the expected values
        passwordValue=$(kubectl get secret my-created-secret -n default -o jsonpath='{.data.password}' | base64 -d)
        usernameValue=$(kubectl get secret my-created-secret -n default -o jsonpath='{.data.username}' | base64 -d)

        if [ "$passwordValue" != "super-secret-value" ]; then
          echo "ERROR: Password field has unexpected value: $passwordValue"
          exit 1
        fi

        if [ "$usernameValue" != "another-value" ]; then
          echo "ERROR: Username field has unexpected value: $usernameValue"
          exit 1
        fi

        # Check ExternalSecret status
        status=$(kubectl get externalsecret test-secret -n default -o jsonpath='{.status.conditions[0].type}')
        if [ "$status" != "Ready" ]; then
          echo "WARNING: ExternalSecret status is: $status"
          kubectl get externalsecret test-secret -n default -o yaml
        fi

        echo "Successfully created and retrieved secrets using fake provider"

update:
  enabled: true
  github:
    identifier: external-secrets/external-secrets
    strip-prefix: v
    tag-filter: v0.19.
